{"version":3,"sources":["ListTodo.js","App.js","serviceWorker.js","index.js"],"names":["ListTodo","props","listItem","todos","map","item","className","type","id","todo","value","onChange","e","editHandler","target","icon","onClick","deleteHandler","duration","easing","library","add","faTrash","faEdit","faCheckCircle","App","todoHandler","event","setState","date","Date","toDateString","slice","isCompleted","todosubmit","preventDefault","todoList","state","push","newToDo","filter","i","newtodo","oldtodo","items","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wUA4BeA,MAvBf,SAAkBC,GACd,IAEMC,EAFQD,EAAME,MAEGC,KAAI,SAAAC,GAC3B,OAAO,yBAAKC,UAAU,QAClB,2BACA,2BAAOC,KAAK,OAAOC,GAAIH,EAAKI,KAAMC,MAAOL,EAAKI,KAC9CE,SAAU,SAACC,GAAKX,EAAMY,YAAYD,EAAEE,OAAOJ,MAAML,EAAKI,SAEtD,kBAAC,IAAD,CAAiBH,UAAU,UAAUS,KAAK,QAC1CC,QAAS,kBAAIf,EAAMgB,cAAcZ,WAIrC,OACI,6BACI,kBAAC,IAAD,CAAUa,SAAU,IAAKC,OAAO,eAChCjB,K,cChBZkB,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,IAAOC,K,IAgFJC,E,kDA7Eb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IAWRyB,YAAc,SAACC,GAEX,EAAKC,SAAU,CACbzB,MAAM,CACNM,KAAKkB,EAAMb,OAAOJ,MAClBmB,MAAK,IAAIC,MAAOC,eAAeC,MAAM,GACrCC,aAAY,MAlBC,EAuBjBC,WAAY,SAACtB,GACZA,EAAEuB,iBACF,IAAIC,EAAQ,YAAO,EAAKC,MAAMD,UAC9BA,EAASE,KAAK,EAAKD,MAAMlC,OACzB,EAAKyB,SAAS,CACZQ,SAAWA,EACXjC,MAAM,CACJM,KAAK,GACLoB,KAAK,GACLI,aAAY,MAhCA,EAqCjBhB,cAAe,SAACZ,GAEd,IAAIkC,EAAS,EAAKF,MAAMD,SAASI,QAAO,SAAAC,GAAC,OAAIA,EAAEhC,MAAMJ,EAAKI,QAC1D,EAAKmB,SAAS,CACZQ,SAASG,KAzCI,EA6CjB1B,YAAc,SAAC6B,EAAQC,GACrB,IAAMC,EAAO,EAAKP,MAAMD,SACxBQ,EAAMxC,KAAI,SAAAC,GACLA,EAAKI,OAASkC,IACftC,EAAKI,KAAOiC,MAGjB,EAAKd,SAAS,CACZQ,SAAUQ,KAlDb,EAAKP,MAAQ,CACVD,SAAS,GACTjC,MAAM,CACJM,KAAK,GACLwB,aAAa,EACbJ,KAAK,KARO,E,qDAyDNgB,KAAKR,MAAMD,SAAShC,KAAI,SAACK,GAAD,OACpC,4BAAKA,EAAKA,SAGT,OACE,yBAAKH,UAAU,aACb,8BACE,2BAAOC,KAAK,OAAOI,SAAUkC,KAAKnB,YAClChB,MAAOmC,KAAKR,MAAMlC,MAAMM,OACxB,4BAAQO,QAAS6B,KAAKX,YAAtB,QAGH,kBAAC,EAAD,CAAU/B,MAAO0C,KAAKR,MAAMD,SAC5BnB,cAAe4B,KAAK5B,cACpBJ,YAAcgC,KAAKhC,mB,GAzERiC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65f23bd1.chunk.js","sourcesContent":["import React from 'react'\nimport '../src/ListItem.css'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport FlipMove from 'react-flip-move'\n\nfunction ListTodo(props) {\n    const todos = props.todos;\n    \n    const listItem = todos.map(item => {\n    return <div className=\"list\">\n        <p>\n        <input type=\"text\" id={item.todo} value={item.todo} \n        onChange={(e)=>{props.editHandler(e.target.value,item.todo)}}\n        ></input>\n        <FontAwesomeIcon className=\"faicons\" icon='trash' \n        onClick={()=>props.deleteHandler(item)}/>\n        </p>\n    </div>\n    })\n    return (\n        <div>\n            <FlipMove duration={500} easing=\"ease-in-out\">\n           {listItem}\n           </FlipMove>\n        </div>\n    )\n}\n\nexport default ListTodo\n","import React, { Component } from 'react'\nimport './App.css';\nimport ListTodo from './ListTodo';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash,faEdit,faCheckCircle } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash);\nlibrary.add(faEdit,faCheckCircle);\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       todoList:[],\n       todos:{\n         todo:'',\n         isCompleted: false ,\n         date:''\n       }\n    }\n  }\n  todoHandler = (event) =>{\n     \n      this.setState ({\n        todos:{\n        todo:event.target.value,\n        date:new Date().toDateString().slice(3),\n        isCompleted:false\n      }\n      })\n    }\n\n    todosubmit =(e) =>{\n     e.preventDefault();\n     var todoList = [...this.state.todoList];\n     todoList.push(this.state.todos)\n     this.setState({\n       todoList : todoList,\n       todos:{\n         todo:'',\n         date:'',\n         isCompleted:false\n       }\n     })\n    }\n\n    deleteHandler =(item)=>{\n     \n      var newToDo= this.state.todoList.filter(i => i.todo!=item.todo)\n      this.setState({\n        todoList:newToDo\n      })\n    }\n\n    editHandler = (newtodo,oldtodo)=>{\n      const items= this.state.todoList;\n      items.map(item => {\n        if(item.todo === oldtodo){\n          item.todo = newtodo;\n        }\n      })\n     this.setState({\n       todoList: items\n     })\n    }\n  render() {\n   var result= this.state.todoList.map((todo) => \n   <li>{todo.todo}</li>)\n   \n   \n    return (\n      <div className=\"container\">\n        <form>\n          <input type=\"text\" onChange={this.todoHandler} \n          value={this.state.todos.todo}></input>\n          <button onClick={this.todosubmit}>Add</button>\n        </form>\n      \n       <ListTodo todos={this.state.todoList}\n       deleteHandler={this.deleteHandler}\n       editHandler= {this.editHandler}/>\n       </div>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}